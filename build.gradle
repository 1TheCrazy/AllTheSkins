plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'com.github.johnrengelman.shadow' version "7.1.0"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

loom {
	splitEnvironmentSourceSets()
}

configurations {
	nfdJars
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	String nfdVersion = "3.3.3";

	// For Compile Time
	implementation "org.lwjgl:lwjgl-nfd:${nfdVersion}"

	// Pull the NFD API + each native classifier into custom config
	nfdJars "org.lwjgl:lwjgl-nfd:${nfdVersion}"
	nfdJars "org.lwjgl:lwjgl-nfd:${nfdVersion}:natives-windows"
	nfdJars "org.lwjgl:lwjgl-nfd:${nfdVersion}:natives-windows-arm64"
	nfdJars "org.lwjgl:lwjgl-nfd:${nfdVersion}:natives-linux"
	nfdJars "org.lwjgl:lwjgl-nfd:${nfdVersion}:natives-linux-arm64"
	nfdJars "org.lwjgl:lwjgl-nfd:${nfdVersion}:natives-macos"
	nfdJars "org.lwjgl:lwjgl-nfd:${nfdVersion}:natives-macos-arm64"
}

// Create fat jar
// Vibe coded with 3h of pain (cause nobody knows how this shit works)
shadowJar {
	// Only shade in the NFD jars (nothing else from your classpath)
	configurations = [project.configurations.nfdJars]

	//Still pull in your own compiled classes + resources
	from(sourceSets.main.output)
	from(sourceSets.client.output)

	// Explode every NFD jar so the native libs (.dll/.so/.dylib) end up at the root
	from {
		project.configurations.nfdJars.collect { zipTree(it) }
	}

	// Standard shadow tweaks
	archiveBaseName.set("all-the-skins-all")
	destinationDirectory.set(file("$buildDir/tmp/allJar"))
	exclude("LICENSE", "LICENSE.txt")
	mergeServiceFiles()
}

remapJar {
	// Remap our fat shadow-jar into the final mod jar
	dependsOn shadowJar
	input.set(shadowJar.archiveFile)
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}